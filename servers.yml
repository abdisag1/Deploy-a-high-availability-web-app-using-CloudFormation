Description: This templete deploys the servers and other resources for the app.

Parameters:
  EnvironmentName:
    Description: The name will be prefixed to the names of all resources created.
    Type: String
  SerAMIId:
    Description: The AMI ID to use for the servers.
    Type: String
  InstanceType:
    Description: The type of EC2 instance
    Type: String
Resources:

  LoadBalancerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http traffic to and from load balancer
      VpcId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http and ssh to our load balancer
      VpcId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0




  S3BucketsRole:
          Type: AWS::IAM::Role
          Properties:
              AssumeRolePolicyDocument:
                  Version: "2012-10-17"
                  Statement:
                      - Effect: Allow
                        Principal:
                            Service:
                                "ec2.amazonaws.com"
                        Action:
                            sts:AssumeRole
              Path: /
    
  S3BucketsInstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
          Path: "/"
          Roles:
              - Ref: S3BucketsRole
            
  S3BucketsPolicy:
      Type: AWS::IAM::Policy
      Properties:
          PolicyName: S3BucketsPolicy
          PolicyDocument:
              Statement:
                  - Effect: Allow
                    Action:
                        - s3:*
                    Resource: "*"
          Roles:
              - Ref: S3BucketsRole

  # Launch configuration section
  WebAppLaunchConfig:
      Type: AWS::EC2::Instance
      Properties:
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            apt-get update -y
            apt-get install unzip awscli -y
            apt-get install apache2 -y
            systemctl start apache2.service
            cd /var/www/html
            aws s3 cp s3://udagramapp/index.html
        ImageId: !Ref SerAMIId
        IamInstanceProfile: !Ref S3BucketsInstanceProfile
        SecurityGroups: !Ref WebServerSecGroup
        InstanceType: !Ref InstanceType
        BlockDeviceMappings:
          - DeviceName: "/dev/sdk"
            Ebs:
              VolumeSize: "10"
              VolumeType: gp2
  


 # Auto Scaling Group section
  WebAppGroup:
    Type: AWS::EC2::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PRI-NETS"
        LaunchConfigurationName: !Ref WebAppLaunchConfig
        MinSize: "4"
        MaxSize: "6"
        TargetGroupArns:
          - Ref:WebAppTargetGroup 
  
  # load blaner security group attached
  WebApploadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SN01"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SN02"
      SecurityGroups:
        - Ref: LoadBalancerSecGroup
  
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref WebApploadBalancer
      port: "80"
      protocol: "HTTP"
  
# load Balancer Listner Rule
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - "/*"
      ListenerArn: !Ref Listener
      Priority: "1"




# Target Group

  WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId:
                Fn::ImportValue:
                    Fn::Sub: "${EnvironmentName}-VPCID"

Outputs:
    WebAppLBDNSName:
        Description: DNS name or Public URL of the Load Balancer
        Value: !Join ["", ["http://", !GetAtt WebAppLB.DNSName]]
        Export:
            Name: !Sub ${EnvironmentName}-LB-DNSName