Description:  
    This template deploys an Application Load Balancer with an associated
    Listener and Security Group rules, and deploys an AutoScaling Group of
    t3.medium EC2 instances with a minimum of 4 instances and a maximum
    of 8 instances with associated Security Group rules and an associated 
    Launch Configuration that downloads the Web Application code from an
    S3 Bucket.

Parameters:

    EnvironmentName:
        Description: The environment name that will be prefixed to resource names
        Type: String
    InstanceType:
        Description: 
            "The EC2 instance type of general purpose"
        Type: String
        AllowedValues: [t2.medium, t3.small, t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge]



Resources:

  UdacityS3ReadOnlyEC2:
        Type: AWS::IAM::Role
        Properties:
            RoleName: 
                !Sub ${EnvironmentName}-Role
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                -   Effect: Allow
                    Principal:
                        Service:
                        - ec2.amazonaws.com
                    Action:
                    - sts:AssumeRole
            Path: "/"

  RolePolicies:
      Type: AWS::IAM::Policy
      Properties:
          PolicyName: AmazonS3ReadOnlyAccess
          PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - 
                  Effect: Allow
                  Action: 
                  -   s3:Get*
                  -   s3:List*
                  Resource: 
                  -   arn:aws:s3:::udacity-demo-1
                  -   arn:aws:s3:::udacity-demo-1/*
          Roles:
          -   Ref: UdacityS3ReadOnlyEC2

  ProfileWithRolesForOurApp:
      Type: AWS::IAM::InstanceProfile
      Properties:
          Path: "/"
          Roles:
          - Ref: UdacityS3ReadOnlyEC2

  LoadBalancerSecGroup:
          Type: AWS::EC2::SecurityGroup
          Properties:
              GroupDescription: Allow http traffic to and from load balancer
              VpcId: 
                Fn::ImportValue:
                  Fn::Sub: "${EnvironmentName}-VPCID"
              SecurityGroupIngress:
              -   IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
              SecurityGroupEgress:
              -   IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0

  WebServerSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
          GroupDescription: Allow http and ssh to our load balancer
          VpcId: 
            Fn::ImportValue:
              Fn::Sub: "${EnvironmentName}-VPCID"
          SecurityGroupIngress:
          -   IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
          -   IpProtocol: tcp
              FromPort: 22
              ToPort: 22
              CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
          -   IpProtocol: tcp
              FromPort: 0
              ToPort: 65535
              CidrIp: 0.0.0.0/0

  WebAppLaunchConfig: 
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
          UserData:
              Fn::Base64: !Sub |
                  #!/bin/bash
                  apt-get update -y
                  apt-get install unzip awscli -y
                  apt-get install apache2 -y
                  systemctl start apache2.service
                  cd /var/www/html
                  echo "Udacity project 2 Web Server Up and Running!" > index.html
                  
          ImageId: ami-0d70546e43a941d70 # i used ubuntu image
          KeyName: udacityservers
          IamInstanceProfile: !Ref ProfileWithRolesForOurApp
          SecurityGroups:
          -   Ref: WebServerSecGroup
          InstanceType: !Ref 'InstanceType'
          BlockDeviceMappings:
          -   DeviceName: "/dev/sdk"
              Ebs:
                  VolumeSize: '10' #10GB

  WebAppTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
          HealthCheckIntervalSeconds: 10
          HealthCheckPath: /
          HealthCheckProtocol: HTTP
          HealthCheckTimeoutSeconds: 8
          HealthyThresholdCount: 2
          Port: 80
          Protocol: HTTP
          UnhealthyThresholdCount: 5
          VpcId: 
            Fn::ImportValue:
              Fn::Sub: "${EnvironmentName}-VPCID"
            

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIVATE-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '8'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup

  WebAppLB:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
          SecurityGroups:
          - Ref: LoadBalancerSecGroup
          Subnets:
          - Fn::ImportValue: !Sub "${EnvironmentName}-PUBLIC1-SN"
          - Fn::ImportValue: !Sub "${EnvironmentName}-PUBLIC2-SN"
  Listener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
          DefaultActions:
          -   Type: forward
              TargetGroupArn:
                  Ref: WebAppTargetGroup
          LoadBalancerArn:
              Ref: WebAppLB
          Port: 80
          Protocol: HTTP

  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
          Actions:
          -   Type: forward
              TargetGroupArn: !Ref 'WebAppTargetGroup'
          Conditions:
          -   Field: path-pattern
              Values: [/]
          ListenerArn: !Ref 'Listener'
          Priority: 1

Outputs:

  WebAppLoadBalancerDNSName:
    Description: DNS name or Public URL of the Load Balancer
    Value: !Join [ "", [ 'http://', !GetAtt WebAppLB.DNSName ]]
    Export:
        Name: !Sub ${EnvironmentName}-LB-DNSName